/*
   SC2001 Lab 2 - Part A
   Implementation of Dijkstra's Algorithm using Adjacency Matrix 
   and Array-based Priority Queue

   Authors: Tee Yuxuan, Agrawal Madhav, Siri Kota
*/

#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define V 9  // Number of vertices in the graph

// Function to find the vertex with the minimum distance
int minDistance(int dist[], bool sptSet[]) {
    int min = INT_MAX, min_index = -1;
    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

// Function to print the final shortest distances from the source
void printSolution(int dist[]) {
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

// Dijkstra's Algorithm using an adjacency matrix
void dijkstraMatrix(int graph[V][V], int src) {
    int dist[V];       // dist[i] holds the shortest distance from src to i
    bool sptSet[V];    // sptSet[i] is true if vertex i's shortest distance is finalized

    // Initialize all distances as INFINITE and sptSet[] as false
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }
    dist[src] = 0;  // Distance from source to itself is always 0

    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);
        sptSet[u] = true;

        // Update dist[v] for adjacent vertices of u
        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX &&
                dist[u] + graph[u][v] < dist[v])
            {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }
    printSolution(dist);
}

int main() {
    // Sample graph represented as an adjacency matrix.
    // A zero value means no edge exists between the vertices.
    int graph[V][V] = {
       {0, 4, 0, 0, 0, 0, 0, 8, 0},
       {4, 0, 8, 0, 0, 0, 0, 11, 0},
       {0, 8, 0, 7, 0, 4, 0, 0, 2},
       {0, 0, 7, 0, 9, 14, 0, 0, 0},
       {0, 0, 0, 9, 0, 10, 0, 0, 0},
       {0, 0, 4, 14, 10, 0, 2, 0, 0},
       {0, 0, 0, 0, 0, 2, 0, 1, 6},
       {8, 11, 0, 0, 0, 0, 1, 0, 7},
       {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };

    int source = 0;
    printf("Dijkstra's Algorithm using Adjacency Matrix (Array-based PQ):\n");
    dijkstraMatrix(graph, source);
    return 0;
}
